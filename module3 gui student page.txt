from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk
from tkinter import messagebox
import mysql.connector
import cv2


class Student:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1460x1000+0+0")
        self.root.title("Face Recognition System")
        self.root.resizable(False, False)

        ##### Variables  #####
        self.var_dep = StringVar()
        self.var_course = StringVar()
        self.var_year = StringVar()
        self.var_semester = StringVar()
        self.var_std_id = StringVar()
        self.var_std_name = StringVar()
        self.var_div = StringVar()
        self.var_roll = StringVar()
        self.var_gender = StringVar()
        self.var_dob = StringVar()
        self.var_email = StringVar()
        self.var_phone = StringVar()
        self.var_address = StringVar()
        self.var_teacher = StringVar()
        self.var_searchtxt = StringVar()
        self.var_search = StringVar()

        # Header image
        header_img = Image.open(r"C:\Users\Win 10\Desktop\Face Recognization\images\1.png")  # path
        header_img = header_img.resize((1460, 100))  # size
        self.header_photo = ImageTk.PhotoImage(header_img)  #
        header_label = Label(self.root, image=self.header_photo)
        header_label.place(x=0, y=0, width=1460, height=100)

        # Background image
        background_img = Image.open(r"C:\Users\Win 10\Desktop\Face Recognization\images\2.png")
        background_img = background_img.resize((1460, 900))
        self.background_photo = ImageTk.PhotoImage(background_img)
        background_label = Label(self.root, image=self.background_photo)
        background_label.place(x=0, y=100, width=1460, height=900)

        # Text label
        title_lbl = Label(self.root, text="Student Registration Details", font=("times new roman", 30, "bold"),
                          bg="white",
                          fg="red")
        title_lbl.place(x=0, y=100, width=1460, height=45)

        # main frame upon background image
        main_frame = Frame(self.root, bd=2)
        main_frame.place(x=0, y=145, width=1460, height=854.5)

        # left label frame
        Left_Frame = LabelFrame(main_frame, bd=2, bg="white", text="Student Details",
                                font=("times new roman", 20, "bold"))
        Left_Frame.place(x=10, y=10, width=750, height=830, )

        # current course frame in left label frame
        current_course = LabelFrame(main_frame, bd=2, bg="white", text="Current Course Information",
                                    font=("times new roman", 18, "bold"))
        current_course.place(x=20, y=50, width=730, height=150)

        # department label and combo box with fixed selection
        dep_label = Label(current_course, text="Department", font=("", 14, "bold"), bg="white")
        dep_label.grid(row=0, column=0, padx=5, pady=5, sticky=W)
        dep_combo = ttk.Combobox(current_course, textvariable=self.var_dep, width=15, font=("bold"), state="readonly")
        dep_combo["values"] = ("Select Department", "SE", "IT", "CS")
        dep_combo.current(0)
        dep_combo.grid(row=0, column=1, padx=2, pady=10, sticky=W)

        # course label and combo box with fixed selection
        Course_label = Label(current_course, text="Course", font=("", 14, "bold"), bg="white")
        Course_label.grid(row=0, column=3, padx=15, pady=10, sticky=W)
        Course_combo = ttk.Combobox(current_course, textvariable=self.var_course, width=20, font=("bold"),
                                    state="readonly")
        Course_combo["values"] = ("Select Course", "SCD", "SCD-LAB", "SDA")
        Course_combo.current(0)
        Course_combo.grid(row=0, column=5, padx=0, sticky=W)

        # year label and combo box with fixed selection
        Year_label = Label(current_course, text="Reg.Year", font=("", 14, "bold"), bg="white")
        Year_label.grid(row=1, column=0, padx=10, sticky=W)
        Year_combo = ttk.Combobox(current_course, textvariable=self.var_year, width=15, font=("bold"), state="readonly")
        Year_combo["values"] = ("Select Year", "2021", "2022", "2023")
        Year_combo.current(0)
        Year_combo.grid(row=1, column=1, sticky=W)

        # semister label and combo box with fixed selection
        Semister_label = Label(current_course, text="Semister", font=("", 14, "bold"), bg="white")
        Semister_label.grid(row=1, column=3, padx=15, sticky=W)
        Semister_combo = ttk.Combobox(current_course, textvariable=self.var_semester, width=20, font=("bold"),
                                      state="readonly")
        Semister_combo["values"] = ("Select Semister", "4", "5", "6", "7", "8")
        Semister_combo.current(0)
        Semister_combo.grid(row=1, column=5, padx=1, pady=10, sticky=W)

        # student classs information frame in left label frame
        Class_student = LabelFrame(main_frame, bd=2, bg="white", text="Student Information",
                                   font=("times new roman", 18, "bold"))
        Class_student.place(x=20, y=210, width=730, height=610)

        # student ID
        studentId_label = Label(Class_student, text="StudentID:", font=("", 14, "bold"), bg="white")
        studentId_label.grid(row=0, column=0, padx=20, pady=30, sticky=W)

        studentId_entry = ttk.Entry(Class_student, textvariable=self.var_std_id, width=19,
                                    font=("times new roman", 13, ""))
        studentId_entry.grid(row=0, column=1, padx=10, sticky=W)

        # student name
        studentName_label = Label(Class_student, text="Student Name:", font=("", 14, "bold"), bg="white")
        studentName_label.grid(row=0, column=2, padx=10, pady=5, sticky=W)

        studentName_entry = ttk.Entry(Class_student, textvariable=self.var_std_name, width=18, font=("", 13, ""))
        studentName_entry.grid(row=0, column=3, padx=10, pady=5, sticky=W)

        # class division
        class_div_label = Label(Class_student, text="Class Division:", font=("", 14, "bold"), bg="white")
        class_div_label.grid(row=1, column=0, padx=10, pady=20, sticky=W)

        div_combo = ttk.Combobox(Class_student, textvariable=self.var_div, font=("", 13, ""), state="readonly",
                                 width=17)
        div_combo["values"] = ("Select Division", "A", "B")
        div_combo.current(0)
        div_combo.grid(row=1, column=1, padx=10, pady=10, sticky=W)

        # roll_no
        roll_no_label = Label(Class_student, text="Roll No:", font=("", 14, "bold"), bg="white")
        roll_no_label.grid(row=1, column=2, padx=20, pady=10, sticky=W)

        roll_no_entry = ttk.Entry(Class_student, textvariable=self.var_roll, width=18, font=("", 13, ""))
        roll_no_entry.grid(row=1, column=3, padx=10, pady=5, sticky=W)

        # Gender
        gender_label = Label(Class_student, text="Gender:", font=("", 14, "bold"), bg="white")
        gender_label.grid(row=2, column=0, padx=20, pady=20, sticky=W)

        gender_combo = ttk.Combobox(Class_student, textvariable=self.var_gender, font=("", 13, ""), state="readonly",
                                    width=17)
        gender_combo["values"] = ("Male", "Female", "Others")
        gender_combo.current(0)
        gender_combo.grid(row=2, column=1, padx=10, pady=10, sticky=W)

        # DOB
        dob_label = Label(Class_student, text="DOB:", font=("", 14, "bold"), bg="white")
        dob_label.grid(row=2, column=2, padx=25, pady=20, sticky=W)

        dob_entry = ttk.Entry(Class_student, textvariable=self.var_dob, width=18, font=("", 13, ""))
        dob_entry.grid(row=2, column=3, padx=10, pady=5, sticky=W)

        # Email
        email_label = Label(Class_student, text="Email:", font=("", 14, "bold"), bg="white")
        email_label.grid(row=3, column=0, padx=30, pady=20, sticky=W)

        email_entry = ttk.Entry(Class_student, textvariable=self.var_email, width=19, font=("", 13, ""))
        email_entry.grid(row=3, column=1, padx=10, pady=10, sticky=W)

        # Phone no
        phone_label = Label(Class_student, text="Phone No:", font=("", 14, "bold"), bg="white")
        phone_label.grid(row=3, column=2, padx=20, pady=5, sticky=W)

        phone_entry = ttk.Entry(Class_student, textvariable=self.var_phone, width=18, font=("", 13, ""))
        phone_entry.grid(row=3, column=3, padx=10, pady=5, sticky=W)

        # Address
        address_label = Label(Class_student, text="Address:", font=("", 14, "bold"), bg="white")
        address_label.grid(row=4, column=0, padx=20, pady=20, sticky=W)

        address_entry = ttk.Entry(Class_student, textvariable=self.var_address, width=19, font=("", 13, ""))
        address_entry.grid(row=4, column=1, padx=10, pady=10, sticky=W)

        # Teacher Name
        teacher_label = Label(Class_student, text="Teacher Name:", font=("", 14, "bold"), bg="white")
        teacher_label.grid(row=4, column=2, padx=10, pady=5, sticky=W)

        teacher_entry = ttk.Entry(Class_student, textvariable=self.var_teacher, width=18, font=("", 13, ""))
        teacher_entry.grid(row=4, column=3, padx=10, pady=5, sticky=W)

        # radio buttons
        self.var_radio1 = StringVar()
        radiobtn1 = ttk.Radiobutton(Class_student, variable=self.var_radio1, text="Take Photo Sample", value="Yes")
        radiobtn1.grid(row=5, column=0, pady=20)

        radiobtn2 = ttk.Radiobutton(Class_student, variable=self.var_radio1, text="No Photo Sample", value="NO")
        radiobtn2.grid(row=5, column=1, pady=20)

        # button frame
        btn_frame = Frame(Class_student, bd=2, relief=RIDGE)
        btn_frame.place(x=0, y=430, width=700, height=40)

        save_btn = Button(btn_frame, command=self.add_data, text="Save", width=16, font=("", 13, "bold"), bg="Green",
                          fg="white")
        save_btn.grid(row=0, column=0)

        update_btn = Button(btn_frame, text="Update", command=self.update_data, width=16, font=("", 13, "bold"),
                            bg="Green", fg="white")
        update_btn.grid(row=0, column=1)

        delete_btn = Button(btn_frame, text="Delete", command=self.delete_data, width=16,
                            font=("times new roman", 13, "bold"), bg="Green",
                            fg="white")
        delete_btn.grid(row=0, column=2)

        reset_btn = Button(btn_frame, text="Reset", command=self.reset_data, width=18, font=("", 13, "bold"),
                           bg="Green", fg="white")
        reset_btn.grid(row=0, column=3)

        # frame for take photo and update photo
        btn_frame1 = Frame(Class_student, bd=2, relief=RIDGE, bg="white")
        btn_frame1.place(x=0, y=480, width=700, height=40)

        take_photo_btn = Button(btn_frame1,command=self.generate_dataset, text="Take Photo Sample", width=35, font=("", 13, "bold"), bg="green",
                                fg="white")
        take_photo_btn.grid(row=0, column=0)

        update_photo_btn = Button(btn_frame1, text="Update Photo Sample", width=35, font=("", 13, "bold"), bg="red",
                                  fg="white")
        update_photo_btn.grid(row=0, column=1)

        # Right label frame
        Right_Frame = LabelFrame(main_frame, bd=2, bg="white", text="STUDENT DETAILS",
                                 font=("times new roman", 22, "bold"))
        Right_Frame.place(x=770, y=10, width=675, height=830)

        ##Search System
        search_frame = LabelFrame(Right_Frame, bd=2, bg="white", relief=RIDGE, text="Search System",
                                  font=("", 15, "bold"))
        search_frame.place(x=5, y=20, width=640, height=70)

        search_label = Label(search_frame, text="Search By:", font=("", 14, "bold"), bg="red", fg="white")
        search_label.grid(row=0, column=0, padx=10, pady=5, sticky=W)

        search_combo = ttk.Combobox(search_frame, font=("", 12, "bold"), state="readonly", width=13)
        search_combo["values"] = ("Select", "Roll_No", "Phone_No")
        search_combo.current(0)
        search_combo.grid(row=0, column=1, padx=2, pady=10, sticky=W)

        search_entry = ttk.Entry(search_frame, width=17, font=("", 11, "bold"))
        search_entry.grid(row=0, column=2, padx=10, pady=5, sticky=W)

        search_btn = Button(search_frame, text="Search", width=9, font=("", 11, "bold"), bg="blue", fg="white")
        search_btn.grid(row=0, column=3, padx=4)

        showAll_btn = Button(search_frame, text="Show All", width=9, font=("", 11, "bold"), bg="blue", fg="white")
        showAll_btn.grid(row=0, column=4, padx=4)

        # Table frame
        table_frame = Frame(Right_Frame, bd=2, bg="white", relief=RIDGE)
        table_frame.place(x=5, y=110, width=640, height=350)

        # scroll bar
        scroll_x = ttk.Scrollbar(table_frame, orient=HORIZONTAL)
        scroll_y = ttk.Scrollbar(table_frame, orient=VERTICAL)

        self.student_table = ttk.Treeview(table_frame, column=(
            "dep", "course", "year", "sem", "id", "name", "div", "roll", "gender", "dob", "email", "phone", "address",
            "teacher", "photo"), xscrollcommand=scroll_x.set, yscrollcommand=scroll_y.set)
        scroll_x.pack(side=BOTTOM, fill=X)
        scroll_y.pack(side=RIGHT, fill=Y)
        scroll_x.config(command=self.student_table.xview)
        scroll_y.config(command=self.student_table.yview)

        self.student_table.heading("dep", text="Department")
        self.student_table.heading("course", text="Course")
        self.student_table.heading("year", text="Year")
        self.student_table.heading("sem", text="Semester")
        self.student_table.heading("id", text="StudentId")
        self.student_table.heading("name", text="Name")
        self.student_table.heading("div", text="Division")
        self.student_table.heading("roll", text="Roll")
        self.student_table.heading("gender", text="Gender")
        self.student_table.heading("dob", text="DOB")
        self.student_table.heading("email", text="Email")
        self.student_table.heading("phone", text="Phone")
        self.student_table.heading("address", text="Address")
        self.student_table.heading("teacher", text="Teacher")
        self.student_table.heading("photo", text="PhotoSampleStatus")
        self.student_table["show"] = "headings"

        self.student_table.column("dep", width=100)
        self.student_table.column("course", width=100)
        self.student_table.column("year", width=100)
        self.student_table.column("sem", width=100)
        self.student_table.column("id", width=100)
        self.student_table.column("name", width=100)
        self.student_table.column("roll", width=100)
        self.student_table.column("gender", width=100)
        self.student_table.column("div", width=100)
        self.student_table.column("dob", width=100)
        self.student_table.column("email", width=100)
        self.student_table.column("phone", width=100)
        self.student_table.column("address", width=100)
        self.student_table.column("teacher", width=100)
        self.student_table.column("photo", width=150)

        self.student_table.pack(fill=BOTH, expand=1)
        self.student_table.bind("<ButtonRelease>", self.get_cursor)
        self.fetch_data()

    ##*********************function*******************************************##
    def add_data(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror("Error", "All Fields are required", parent=self.root)
        else:
            try:
                conn = mysql.connector.connect(host="localhost", user="root", password="pass11",
                                               database="face_recognization", auth_plugin='mysql_native_password')
                my_cursor = conn.cursor()
                my_cursor.execute("INSERT INTO Srudent values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)", (

                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_semester.get(),
                    self.var_std_id.get(),
                    self.var_std_name.get(),
                    self.var_div.get(),
                    self.var_roll.get(),
                    self.var_gender.get(),
                    self.var_dob.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_address.get(),
                    self.var_teacher.get(),
                    self.var_radio1.get(),

                ))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success", "Student details has been added Sucessfully", parent=self.root)
            except Exception as es:
                messagebox.showerror("Error", f"Due To :{str(es)}", parent=self.root)

    ######======Fetch data ==============#####
    def fetch_data(self):
        conn = mysql.connector.connect(host="localhost", user="root", password="pass11", database="face_recognization",
                                       auth_plugin='mysql_native_password')
        my_cursor = conn.cursor()
        my_cursor.execute("select * from srudent")
        data = my_cursor.fetchall()

        if len(data) != 0:
            self.student_table.delete(*self.student_table.get_children())
            for i in data:
                self.student_table.insert("", END, values=i)
            conn.commit()
        conn.close()

    # =================== get cursor ======================#
    def get_cursor(self, event=""):
        cursor_focus = self.student_table.focus()
        content = self.student_table.item(cursor_focus)
        data = content["values"]

        self.var_dep.set(data[0]),
        self.var_course.set(data[1]),
        self.var_year.set(data[2]),
        self.var_semester.set(data[3]),
        self.var_std_id.set(data[4]),
        self.var_std_name.set(data[5]),
        self.var_div.set(data[6]),
        self.var_roll.set(data[7]),
        self.var_gender.set(data[8]),
        self.var_dob.set(data[9]),
        self.var_email.set(data[10]),
        self.var_phone.set(data[11]),
        self.var_address.set(data[12]),
        self.var_teacher.set(data[13]),
        self.var_radio1.set(data[14])

        # ============= Update function =========================

    def update_data(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror("Error", "All fields Are Required", parent=self.root)

        else:
            try:
                Update = messagebox.askyesno("Update", "Do You Want To Update This Student Details", parent=self.root)
                if Update > 0:
                    conn = mysql.connector.connect(host="localhost", user="root", password="pass11",
                                                   database="face_recognization", auth_plugin='mysql_native_password')
                    my_cursor = conn.cursor()
                    my_cursor.execute(
                        "update srudent set Department=%s,Course=%s,Year=%s,Semister=%s,Name=%s,Division=%s,Roll_no=%s,Gender=%s,Dob=%s,Email=%s,Phone=%s,Address=%s,Teacher=%s,Photo_Sample=%s where std_id=%s",
                        (

                            self.var_dep.get(),
                            self.var_course.get(),
                            self.var_year.get(),
                            self.var_semester.get(),
                            self.var_std_name.get(),
                            self.var_div.get(),
                            self.var_roll.get(),
                            self.var_gender.get(),
                            self.var_dob.get(),
                            self.var_email.get(),
                            self.var_phone.get(),
                            self.var_address.get(),
                            self.var_teacher.get(),
                            self.var_radio1.get(),
                            self.var_std_id.get()
                        ))


                else:
                    if not Update:
                        return
                messagebox.showinfo("Success", "Student Details updated Successfully.", parent=self.root)
                conn.commit()
                self.fetch_data()
                conn.close()
            except Exception as es:
                messagebox.showerror("Error", f"Due To :{str(es)}", parent=self.root)

    # ===================Delete Function===================
    def delete_data(self):
        if self.var_std_id.get() == "":
            messagebox.showerror("Error", "Student Id Must be Required", parent=self.root)
        else:
            try:
                delete = messagebox.askyesno("Student Delete Page", "Do You Want To Delete This Student Details",
                                             parent=self.root)
                if delete > 0:
                    conn = mysql.connector.connect(host="localhost", user="root", password="pass11",
                                                   database="face_recognization", auth_plugin='mysql_native_password')

                    my_cursor = conn.cursor()
                    sql = "delete from srudent where std_id=%s"
                    val = (self.var_std_id.get(),)
                    my_cursor.execute(sql, val)

                else:
                    if not delete:
                        return

                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Delete", "Student Details Successfully deleted", parent=self.root)

            except Exception as es:
                messagebox.showerror("Error", f"Due To :{str(es)}", parent=self.root)

    # ============Reset Function =============================
    def reset_data(self):
        self.var_dep.set("Select Department")
        self.var_course.set("Select Course")
        self.var_year.set("Select Year")
        self.var_semester.set("Select Semester")
        self.var_std_id.set("")
        self.var_std_name.set("")
        self.var_div.set("Select Division")
        self.var_roll.set("")
        self.var_gender.set("Male")
        self.var_dob.set("")
        self.var_email.set("")
        self.var_phone.set("")
        self.var_address.set("")
        self.var_teacher.set("")
        self.var_radio1.set("")

    # ..............Generate data set or take photo sample

    def generate_dataset(self):
        if self.var_dep.get() == "Select Department" or self.var_std_name.get() == "" or self.var_std_id.get() == "":
            messagebox.showerror("Error", "All fields Are Required", parent=self.root)
        else:
            try:
                conn = mysql.connector.connect(host="localhost", user="root", password="pass11",
                                               database="face_recognization", auth_plugin='mysql_native_password')
                my_cursor = conn.cursor()
                my_cursor.execute("select * from srudent")
                myresult = my_cursor.fetchall()
                id = 0
                for x in myresult:
                    id += 1
                my_cursor.execute(
                    "update srudent set Department=%s,Course=%s,Year=%s,Semister=%s,Name=%s,Division=%s,Roll_no=%s,Gender=%s,Dob=%s,Email=%s,Phone=%s,Address=%s,Teacher=%s,Photo_Sample=%s where std_id=%s",
                    (

                        self.var_dep.get(),
                        self.var_course.get(),
                        self.var_year.get(),
                        self.var_semester.get(),
                        self.var_std_name.get(),
                        self.var_div.get(),
                        self.var_roll.get(),
                        self.var_gender.get(),
                        self.var_dob.get(),
                        self.var_email.get(),
                        self.var_phone.get(),
                        self.var_address.get(),
                        self.var_teacher.get(),
                        self.var_radio1.get(),
                        self.var_std_id.get() == id + 1
                    ))
                conn.commit()
                self.fetch_data()
                self.reset_data()
                conn.close()
                # ..................load predefined data  face forntal from opencv.............
                face_classifier = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

                def face_cropped(img):
                    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                    faces = face_classifier.detectMultiScale(gray, 1.3, 5)

                    for (x, y, w, h) in faces:
                        face_cropped = img[y:y + h, x:x + w]
                        return face_cropped

                cap = cv2.VideoCapture(0)

                img_id = 0
                while True:
                    ret, my_frame = cap.read()
                    if face_cropped(my_frame) is not None:
                        img_id += 1
                        face = cv2.resize(face_cropped(my_frame), (450, 450))
                        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
                        file_name_path = "data/" + "user" + "." + str(id) + "." + str(img_id) + ".jpg"
                        cv2.imwrite(file_name_path, face)
                        cv2.putText(face, str(img_id), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 2, (0, 255, 0), 2)
                        cv2.imshow("Cropped Face", face)

                    if cv2.waitKey(1) == 13 or int(img_id) == 100:
                        break
                cap.release()
                cv2.destroyAllWindows()

                messagebox.showinfo("Result", "Generation of data set completed!!!", parent=self.root)
            except Exception as es:
                messagebox.showerror("Error", f"Due To :{str(es)}", parent=self.root)


if __name__ == "__main__":
    root = Tk()
    obj = Student(root)
    root.mainloop()
