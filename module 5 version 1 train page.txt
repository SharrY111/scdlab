from tkinter import *
from PIL import Image, ImageTk
import os
import numpy as np
import cv2
from tkinter import messagebox

class Train:
    def __init__(self, root):
        self.root = root
        self.root.geometry("1460x1000")
        self.root.title("Train Data")
        self.root.resizable(False, False)

        # Header image
        header_img = Image.open("images/1.png")
        header_img = header_img.resize((1460, 100))
        self.header_photo = ImageTk.PhotoImage(header_img)
        header_label = Label(self.root, image=self.header_photo)
        header_label.place(x=0, y=0, width=1460, height=100)

        # Background image
        background_img = Image.open("images/2.png")
        background_img = background_img.resize((1460, 900))
        self.background_photo = ImageTk.PhotoImage(background_img)
        background_label = Label(self.root, image=self.background_photo)
        background_label.place(x=0, y=100, width=1460, height=900)

        # Text label
        title_lbl = Label(self.root, text="Train Data", font=("times new roman", 35, "bold"), bg="white", fg="red")
        title_lbl.place(x=10, y=100, width=1460, height=40)

        # Button
        btn = Button(self.root, text="Train Data", command=self.train_classifier, width=35, font=("", 18, "bold"), bg="red", fg="white")
        btn.place(x=0, y=550, width=1470, height=40)

    def train_classifier(self):
        data_dir = "Data"
        path = [os.path.join(data_dir, file) for file in os.listdir(data_dir)]

        faces = []
        ids = []


        for image in path:
            img=Image.open(image).convert('L')  # grAY SCALE image
            imageNp=np.array(img,'uint8')
            id=int(os.path.split(image)[1].split('.')[1])

            faces.append(imageNp)
            ids.append(id)
            cv2.imshow("Training",imageNp)
            cv2.waitKey(1)==13
        ids=np.array(ids)

        # Train the classifier and save
        clf=cv2.face.LBPHFaceRecognizer_create()
        clf.train(faces,ids)
        clf.write("classifier.xml")
        cv2.destroyAllWindows()
        messagebox.showinfo("Result","Training datasets completed successfully!",parent=self.root)
        self.root.destroy()

if __name__ == "__main__":
    root = Tk()
    obj = Train(root)
    root.mainloop()
